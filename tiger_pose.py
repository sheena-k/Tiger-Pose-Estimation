# -*- coding: utf-8 -*-
"""Tiger-Pose.ipynb

Automatically generated by Colab.


# **Tiger-Pose Estimation**

## **Project Overview**

This project showcases the application of deep learning in pose estimation for tigers using the Ultralytics YOLO-Pose model. The goal is to detect and analyze tiger body keypoints, which can be used in wildlife monitoring, behavior analysis, and conservation.

**YOLO-Pose for tiger pose estimation**

**Setting Up Colab Environment**
  
  ##### Ensure Colab notebook is configured to use GPU for faster processing.

####Install Ultralytics YOLO
"""

!pip install ultralytics

"""Download and Extract the Tiger-Pose Dataset"""

# Download the dataset
!wget https://github.com/ultralytics/assets/releases/download/v0.0.0/tiger-pose.zip
# The Tiger-Pose dataset consists of images labeled with 12 keypoints per tiger, stored in annotation files.

# Create a directory for the dataset
!mkdir -p datasets/tiger-pose   #Source: Ultralytics Tiger-Pose dataset.

# Unzip the dataset into the created directory
!unzip -q tiger-pose.zip -d datasets/tiger-pose

"""Data Structure:

Images: Annotated tiger images.

Annotations: 12 keypoints per tiger (head, legs, tail, etc.).

Create the Dataset Configuration File :yaml file "tiger-pose.yaml" save it in colab environment
"""

# Write the YAML configuration to a file
with open('tiger-pose.yaml', 'w') as f:
    f.write("""
path: /content/datasets/tiger-pose
train: train
val: val
kpt_shape: [12, 2]
flip_idx: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
names:
  0: tiger
""")

"""**Model Training**

The YOLO-Pose architecture modifies the standard YOLO object detection framework to output keypoint coordinates (x, y) instead of just bounding boxes.

Instead of classifying entire objects, the model predicts each keypointâ€™s exact position within the bounding box.

It minimizes errors by optimizing the Euclidean distance between predicted and ground truth keypoints.

The YOLO-Pose model is typically trained for human pose estimation, so to get accurate results for tiger pose estimation,need to retrain or fine-tune the model using the Tiger-Pose dataset.

###YOLO-Pose for tiger pose estimation  
####Transfer learning Approach
"""

from ultralytics import YOLO

# Load a pretrained YOLO pose model
model = YOLO('yolov8n-pose.pt')

# Train the model on the Tiger-Pose dataset
results = model.train(data='tiger-pose.yaml', epochs=5, imgsz=640) #make epoch to 50 -100 for better result

# Run inference
results = model.predict("/content/tiger-1.jpg")

!pip install opencv-python

# Save the prediction output
output_path = "/content/predicted_tiger.jpg"
results[0].save(output_path)

# Load and display the saved image
img_pred = cv2.imread(output_path)
img_pred = cv2.cvtColor(img_pred, cv2.COLOR_BGR2RGB)

plt.imshow(img_pred)
plt.axis("off")
plt.show()
